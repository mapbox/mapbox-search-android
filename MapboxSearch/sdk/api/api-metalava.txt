// Signature format: 3.0
package com.mapbox.search {

  public enum ApiType {
    enum_constant public static final com.mapbox.search.ApiType GEOCODING;
    enum_constant public static final com.mapbox.search.ApiType SBS;
  }

  public final class ApiTypeKt {
  }

  @kotlinx.parcelize.Parcelize public final class CategorySearchOptions implements android.os.Parcelable {
    ctor public CategorySearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, Boolean? fuzzyMatch = null, java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages = defaultSearchOptionsLanguage(), Integer? limit = null, Integer? requestDebounce = null, com.mapbox.geojson.Point? origin = null, com.mapbox.search.common.NavigationProfile? navigationProfile = null, com.mapbox.search.RouteOptions? routeOptions = null, java.util.Map<java.lang.String,java.lang.String>? unsafeParameters = null, boolean ignoreIndexableRecords = false, Double? indexableRecordsDistanceThresholdMeters = null);
    ctor public CategorySearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, Boolean? fuzzyMatch = null, java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages = defaultSearchOptionsLanguage(), Integer? limit = null, Integer? requestDebounce = null, com.mapbox.geojson.Point? origin = null, com.mapbox.search.common.NavigationProfile? navigationProfile = null, com.mapbox.search.RouteOptions? routeOptions = null, java.util.Map<java.lang.String,java.lang.String>? unsafeParameters = null, boolean ignoreIndexableRecords = false);
    ctor public CategorySearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, Boolean? fuzzyMatch = null, java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages = defaultSearchOptionsLanguage(), Integer? limit = null, Integer? requestDebounce = null, com.mapbox.geojson.Point? origin = null, com.mapbox.search.common.NavigationProfile? navigationProfile = null, com.mapbox.search.RouteOptions? routeOptions = null, java.util.Map<java.lang.String,java.lang.String>? unsafeParameters = null);
    ctor public CategorySearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, Boolean? fuzzyMatch = null, java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages = defaultSearchOptionsLanguage(), Integer? limit = null, Integer? requestDebounce = null, com.mapbox.geojson.Point? origin = null, com.mapbox.search.common.NavigationProfile? navigationProfile = null, com.mapbox.search.RouteOptions? routeOptions = null);
    ctor public CategorySearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, Boolean? fuzzyMatch = null, java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages = defaultSearchOptionsLanguage(), Integer? limit = null, Integer? requestDebounce = null, com.mapbox.geojson.Point? origin = null, com.mapbox.search.common.NavigationProfile? navigationProfile = null);
    ctor public CategorySearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, Boolean? fuzzyMatch = null, java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages = defaultSearchOptionsLanguage(), Integer? limit = null, Integer? requestDebounce = null, com.mapbox.geojson.Point? origin = null);
    ctor public CategorySearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, Boolean? fuzzyMatch = null, java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages = defaultSearchOptionsLanguage(), Integer? limit = null, Integer? requestDebounce = null);
    ctor public CategorySearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, Boolean? fuzzyMatch = null, java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages = defaultSearchOptionsLanguage(), Integer? limit = null);
    ctor public CategorySearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, Boolean? fuzzyMatch = null, java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages = defaultSearchOptionsLanguage());
    ctor public CategorySearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, Boolean? fuzzyMatch = null);
    ctor public CategorySearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null);
    ctor public CategorySearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null);
    ctor public CategorySearchOptions(com.mapbox.geojson.Point? proximity = null);
    method public com.mapbox.geojson.BoundingBox? getBoundingBox();
    method public java.util.List<com.mapbox.search.common.IsoCountryCode>? getCountries();
    method public Boolean? getFuzzyMatch();
    method public boolean getIgnoreIndexableRecords();
    method public Double? getIndexableRecordsDistanceThresholdMeters();
    method public java.util.List<com.mapbox.search.common.IsoLanguageCode>? getLanguages();
    method public Integer? getLimit();
    method public com.mapbox.search.common.NavigationProfile? getNavigationProfile();
    method public com.mapbox.geojson.Point? getOrigin();
    method public com.mapbox.geojson.Point? getProximity();
    method public Integer? getRequestDebounce();
    method public com.mapbox.search.RouteOptions? getRouteOptions();
    method public java.util.Map<java.lang.String,java.lang.String>? getUnsafeParameters();
    method public com.mapbox.search.CategorySearchOptions.Builder toBuilder();
    property public final com.mapbox.geojson.BoundingBox? boundingBox;
    property public final java.util.List<com.mapbox.search.common.IsoCountryCode>? countries;
    property public final Boolean? fuzzyMatch;
    property public final boolean ignoreIndexableRecords;
    property public final Double? indexableRecordsDistanceThresholdMeters;
    property public final java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages;
    property public final Integer? limit;
    property public final com.mapbox.search.common.NavigationProfile? navigationProfile;
    property public final com.mapbox.geojson.Point? origin;
    property public final com.mapbox.geojson.Point? proximity;
    property public final Integer? requestDebounce;
    property public final com.mapbox.search.RouteOptions? routeOptions;
    property public final java.util.Map<java.lang.String,java.lang.String>? unsafeParameters;
  }

  public static final class CategorySearchOptions.Builder {
    ctor public CategorySearchOptions.Builder();
    method public com.mapbox.search.CategorySearchOptions.Builder boundingBox(com.mapbox.geojson.BoundingBox boundingBox);
    method public com.mapbox.search.CategorySearchOptions build();
    method public com.mapbox.search.CategorySearchOptions.Builder countries(com.mapbox.search.common.IsoCountryCode... countries);
    method public com.mapbox.search.CategorySearchOptions.Builder countries(java.util.List<com.mapbox.search.common.IsoCountryCode> countries);
    method public com.mapbox.search.CategorySearchOptions.Builder fuzzyMatch(boolean fuzzyMatch);
    method public com.mapbox.search.CategorySearchOptions.Builder ignoreIndexableRecords(boolean ignoreIndexableRecords);
    method public com.mapbox.search.CategorySearchOptions.Builder indexableRecordsDistanceThresholdMeters(Double? threshold);
    method public com.mapbox.search.CategorySearchOptions.Builder languages(com.mapbox.search.common.IsoLanguageCode... languages);
    method public com.mapbox.search.CategorySearchOptions.Builder languages(java.util.List<com.mapbox.search.common.IsoLanguageCode> languages);
    method public com.mapbox.search.CategorySearchOptions.Builder limit(int limit);
    method public com.mapbox.search.CategorySearchOptions.Builder navigationProfile(com.mapbox.search.common.NavigationProfile navigationProfile);
    method public com.mapbox.search.CategorySearchOptions.Builder origin(com.mapbox.geojson.Point origin);
    method public com.mapbox.search.CategorySearchOptions.Builder proximity(com.mapbox.geojson.Point? proximity);
    method public com.mapbox.search.CategorySearchOptions.Builder requestDebounce(int debounce);
    method public com.mapbox.search.CategorySearchOptions.Builder routeOptions(com.mapbox.search.RouteOptions routeOptions);
    method public com.mapbox.search.CategorySearchOptions.Builder unsafeParameters(java.util.Map<java.lang.String,java.lang.String> unsafeParameters);
  }

  public final class CategorySearchOptionsKt {
  }

  @kotlinx.parcelize.Parcelize public final class EtaType implements android.os.Parcelable {
    ctor public EtaType(String rawName);
    method public String getRawName();
    property public final String rawName;
    field public static final com.mapbox.search.EtaType.Companion Companion;
    field public static final com.mapbox.search.EtaType NAVIGATION;
  }

  public static final class EtaType.Companion {
  }

  public enum QueryType {
    enum_constant public static final com.mapbox.search.QueryType ADDRESS;
    enum_constant public static final com.mapbox.search.QueryType CATEGORY;
    enum_constant public static final com.mapbox.search.QueryType COUNTRY;
    enum_constant public static final com.mapbox.search.QueryType DISTRICT;
    enum_constant public static final com.mapbox.search.QueryType LOCALITY;
    enum_constant public static final com.mapbox.search.QueryType NEIGHBORHOOD;
    enum_constant public static final com.mapbox.search.QueryType PLACE;
    enum_constant public static final com.mapbox.search.QueryType POI;
    enum_constant public static final com.mapbox.search.QueryType POSTCODE;
    enum_constant public static final com.mapbox.search.QueryType REGION;
    enum_constant public static final com.mapbox.search.QueryType STREET;
  }

  public final class QueryTypeKt {
  }

  @kotlinx.parcelize.Parcelize public final class RequestOptions implements android.os.Parcelable {
    method public String getEndpoint();
    method public com.mapbox.search.SearchOptions getOptions();
    method public boolean getOriginRewritten();
    method public boolean getProximityRewritten();
    method public String getQuery();
    method public String getSessionID();
    property public final String endpoint;
    property public final com.mapbox.search.SearchOptions options;
    property public final boolean originRewritten;
    property public final boolean proximityRewritten;
    property public final String query;
    property public final String sessionID;
  }

  public final class RequestOptionsKt {
  }

  @kotlinx.parcelize.Parcelize public final class ResponseInfo implements android.os.Parcelable {
    method public com.mapbox.search.RequestOptions getRequestOptions();
    method public String? getResponseUuid();
    property public final com.mapbox.search.RequestOptions requestOptions;
    property public final String? responseUuid;
  }

  public final class ResponseInfoKt {
  }

  @kotlinx.parcelize.Parcelize public final class ReverseGeoOptions implements android.os.Parcelable {
    ctor public ReverseGeoOptions(com.mapbox.geojson.Point center, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages = defaultSearchOptionsLanguage(), Integer? limit = null, com.mapbox.search.ReverseMode? reverseMode = null, java.util.List<? extends com.mapbox.search.QueryType>? types = null);
    ctor public ReverseGeoOptions(com.mapbox.geojson.Point center, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages = defaultSearchOptionsLanguage(), Integer? limit = null, com.mapbox.search.ReverseMode? reverseMode = null);
    ctor public ReverseGeoOptions(com.mapbox.geojson.Point center, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages = defaultSearchOptionsLanguage(), Integer? limit = null);
    ctor public ReverseGeoOptions(com.mapbox.geojson.Point center, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages = defaultSearchOptionsLanguage());
    ctor public ReverseGeoOptions(com.mapbox.geojson.Point center, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null);
    ctor public ReverseGeoOptions(com.mapbox.geojson.Point center);
    method public com.mapbox.geojson.Point getCenter();
    method public java.util.List<com.mapbox.search.common.IsoCountryCode>? getCountries();
    method public java.util.List<com.mapbox.search.common.IsoLanguageCode>? getLanguages();
    method public Integer? getLimit();
    method public com.mapbox.search.ReverseMode? getReverseMode();
    method public java.util.List<com.mapbox.search.QueryType>? getTypes();
    method public com.mapbox.search.ReverseGeoOptions.Builder toBuilder();
    property public final com.mapbox.geojson.Point center;
    property public final java.util.List<com.mapbox.search.common.IsoCountryCode>? countries;
    property public final java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages;
    property public final Integer? limit;
    property public final com.mapbox.search.ReverseMode? reverseMode;
    property public final java.util.List<com.mapbox.search.QueryType>? types;
  }

  public static final class ReverseGeoOptions.Builder {
    ctor public ReverseGeoOptions.Builder(com.mapbox.geojson.Point center);
    method public com.mapbox.search.ReverseGeoOptions build();
    method public com.mapbox.search.ReverseGeoOptions.Builder countries(com.mapbox.search.common.IsoCountryCode... countries);
    method public com.mapbox.search.ReverseGeoOptions.Builder countries(java.util.List<com.mapbox.search.common.IsoCountryCode> countries);
    method public com.mapbox.search.ReverseGeoOptions.Builder languages(com.mapbox.search.common.IsoLanguageCode... languages);
    method public com.mapbox.search.ReverseGeoOptions.Builder languages(java.util.List<com.mapbox.search.common.IsoLanguageCode> languages);
    method public com.mapbox.search.ReverseGeoOptions.Builder limit(int limit);
    method public com.mapbox.search.ReverseGeoOptions.Builder reverseMode(com.mapbox.search.ReverseMode reverseMode);
    method public com.mapbox.search.ReverseGeoOptions.Builder types(com.mapbox.search.QueryType... types);
    method public com.mapbox.search.ReverseGeoOptions.Builder types(java.util.List<? extends com.mapbox.search.QueryType> types);
  }

  public final class ReverseGeoOptionsKt {
  }

  public enum ReverseMode {
    enum_constant public static final com.mapbox.search.ReverseMode DISTANCE;
    enum_constant public static final com.mapbox.search.ReverseMode SCORE;
  }

  @kotlinx.parcelize.Parcelize public final class RouteOptions implements android.os.Parcelable {
    ctor public RouteOptions(java.util.List<com.mapbox.geojson.Point> route, com.mapbox.search.RouteOptions.Deviation deviation);
    method public com.mapbox.search.RouteOptions.Deviation getDeviation();
    method public java.util.List<com.mapbox.geojson.Point> getRoute();
    property public final com.mapbox.search.RouteOptions.Deviation deviation;
    property public final java.util.List<com.mapbox.geojson.Point> route;
  }

  public abstract static class RouteOptions.Deviation implements android.os.Parcelable {
    method public abstract com.mapbox.search.RouteOptions.Deviation.SarType? getSarType();
    property public abstract com.mapbox.search.RouteOptions.Deviation.SarType? sarType;
  }

  @kotlinx.parcelize.Parcelize public static final class RouteOptions.Deviation.SarType implements android.os.Parcelable {
    ctor public RouteOptions.Deviation.SarType(String rawName);
    method public String getRawName();
    property public final String rawName;
    field public static final com.mapbox.search.RouteOptions.Deviation.SarType ISOCHROME;
  }

  @kotlinx.parcelize.Parcelize public static final class RouteOptions.Deviation.Time extends com.mapbox.search.RouteOptions.Deviation {
    ctor public RouteOptions.Deviation.Time(long value, java.util.concurrent.TimeUnit unit, com.mapbox.search.RouteOptions.Deviation.SarType? sarType = com.mapbox.search.RouteOptions.Deviation.SarType.ISOCHROME);
    ctor public RouteOptions.Deviation.Time(long value, java.util.concurrent.TimeUnit unit);
    method public com.mapbox.search.RouteOptions.Deviation.SarType? getSarType();
    method public java.util.concurrent.TimeUnit getUnit();
    method public long getValue();
    property public com.mapbox.search.RouteOptions.Deviation.SarType? sarType;
    property public final java.util.concurrent.TimeUnit unit;
    property public final long value;
  }

  public interface SearchCallback {
    method public void onError(Exception e);
    method public void onResults(java.util.List<com.mapbox.search.result.SearchResult> results, com.mapbox.search.ResponseInfo responseInfo);
  }

  public interface SearchEngine {
    method public default static com.mapbox.search.SearchEngine createSearchEngine(com.mapbox.search.SearchEngineSettings settings);
    method public default static com.mapbox.search.SearchEngine createSearchEngine(com.mapbox.search.ApiType apiType, com.mapbox.search.SearchEngineSettings settings);
    method public default static com.mapbox.search.SearchEngine createSearchEngineWithBuiltInDataProviders(com.mapbox.search.SearchEngineSettings settings, java.util.concurrent.Executor executor = SearchSdkMainThreadWorker.mainExecutor, com.mapbox.search.common.CompletionCallback<kotlin.Unit> callback = com.mapbox.search.base.StubCompletionCallback());
    method public default static final com.mapbox.search.SearchEngine createSearchEngineWithBuiltInDataProviders(com.mapbox.search.SearchEngineSettings settings, java.util.concurrent.Executor executor = SearchSdkMainThreadWorker.mainExecutor);
    method public default static final com.mapbox.search.SearchEngine createSearchEngineWithBuiltInDataProviders(com.mapbox.search.SearchEngineSettings settings);
    method public default static com.mapbox.search.SearchEngine createSearchEngineWithBuiltInDataProviders(com.mapbox.search.ApiType apiType, com.mapbox.search.SearchEngineSettings settings, java.util.concurrent.Executor executor = SearchSdkMainThreadWorker.mainExecutor, com.mapbox.search.common.CompletionCallback<kotlin.Unit> callback = com.mapbox.search.base.StubCompletionCallback());
    method public default static final com.mapbox.search.SearchEngine createSearchEngineWithBuiltInDataProviders(com.mapbox.search.ApiType apiType, com.mapbox.search.SearchEngineSettings settings, java.util.concurrent.Executor executor = SearchSdkMainThreadWorker.mainExecutor);
    method public default static final com.mapbox.search.SearchEngine createSearchEngineWithBuiltInDataProviders(com.mapbox.search.ApiType apiType, com.mapbox.search.SearchEngineSettings settings);
    method public com.mapbox.search.analytics.AnalyticsService getAnalyticsService();
    method public com.mapbox.search.ApiType getApiType();
    method public com.mapbox.search.SearchEngineSettings getSettings();
    method public <R extends com.mapbox.search.record.IndexableRecord> com.mapbox.search.common.AsyncOperationTask registerDataProvider(com.mapbox.search.record.IndexableDataProvider<R> dataProvider, java.util.concurrent.Executor executor, com.mapbox.search.common.CompletionCallback<kotlin.Unit> callback);
    method public default <R extends com.mapbox.search.record.IndexableRecord> com.mapbox.search.common.AsyncOperationTask registerDataProvider(com.mapbox.search.record.IndexableDataProvider<R> dataProvider, com.mapbox.search.common.CompletionCallback<kotlin.Unit> callback);
    method public com.mapbox.search.common.AsyncOperationTask search(String query, com.mapbox.search.SearchOptions options, java.util.concurrent.Executor executor, com.mapbox.search.SearchSuggestionsCallback callback);
    method public default com.mapbox.search.common.AsyncOperationTask search(String query, com.mapbox.search.SearchOptions options, com.mapbox.search.SearchSuggestionsCallback callback);
    method public com.mapbox.search.common.AsyncOperationTask search(String categoryName, com.mapbox.search.CategorySearchOptions options, java.util.concurrent.Executor executor, com.mapbox.search.SearchCallback callback);
    method public default com.mapbox.search.common.AsyncOperationTask search(String categoryName, com.mapbox.search.CategorySearchOptions options, com.mapbox.search.SearchCallback callback);
    method public com.mapbox.search.common.AsyncOperationTask search(com.mapbox.search.ReverseGeoOptions options, java.util.concurrent.Executor executor, com.mapbox.search.SearchCallback callback);
    method public default com.mapbox.search.common.AsyncOperationTask search(com.mapbox.search.ReverseGeoOptions options, com.mapbox.search.SearchCallback callback);
    method public default com.mapbox.search.common.AsyncOperationTask select(com.mapbox.search.result.SearchSuggestion suggestion, com.mapbox.search.SearchSelectionCallback callback);
    method public default com.mapbox.search.common.AsyncOperationTask select(com.mapbox.search.result.SearchSuggestion suggestion, com.mapbox.search.SelectOptions options, com.mapbox.search.SearchSelectionCallback callback);
    method public com.mapbox.search.common.AsyncOperationTask select(com.mapbox.search.result.SearchSuggestion suggestion, com.mapbox.search.SelectOptions options, java.util.concurrent.Executor executor, com.mapbox.search.SearchSelectionCallback callback);
    method public com.mapbox.search.common.AsyncOperationTask select(java.util.List<com.mapbox.search.result.SearchSuggestion> suggestions, java.util.concurrent.Executor executor, com.mapbox.search.SearchMultipleSelectionCallback callback);
    method public default com.mapbox.search.common.AsyncOperationTask select(java.util.List<com.mapbox.search.result.SearchSuggestion> suggestions, com.mapbox.search.SearchMultipleSelectionCallback callback);
    method public <R extends com.mapbox.search.record.IndexableRecord> com.mapbox.search.common.AsyncOperationTask unregisterDataProvider(com.mapbox.search.record.IndexableDataProvider<R> dataProvider, java.util.concurrent.Executor executor, com.mapbox.search.common.CompletionCallback<kotlin.Unit> callback);
    method public default <R extends com.mapbox.search.record.IndexableRecord> com.mapbox.search.common.AsyncOperationTask unregisterDataProvider(com.mapbox.search.record.IndexableDataProvider<R> dataProvider, com.mapbox.search.common.CompletionCallback<kotlin.Unit> callback);
    property public abstract com.mapbox.search.analytics.AnalyticsService analyticsService;
    property public abstract com.mapbox.search.ApiType apiType;
    property public abstract com.mapbox.search.SearchEngineSettings settings;
    field public static final com.mapbox.search.SearchEngine.Companion Companion;
  }

  public static final class SearchEngine.Companion {
    method public com.mapbox.search.SearchEngine createSearchEngine(com.mapbox.search.SearchEngineSettings settings);
    method public com.mapbox.search.SearchEngine createSearchEngine(com.mapbox.search.ApiType apiType, com.mapbox.search.SearchEngineSettings settings);
    method public com.mapbox.search.SearchEngine createSearchEngineWithBuiltInDataProviders(com.mapbox.search.SearchEngineSettings settings, java.util.concurrent.Executor executor = SearchSdkMainThreadWorker.mainExecutor, com.mapbox.search.common.CompletionCallback<kotlin.Unit> callback = com.mapbox.search.base.StubCompletionCallback());
    method public com.mapbox.search.SearchEngine createSearchEngineWithBuiltInDataProviders(com.mapbox.search.SearchEngineSettings settings, java.util.concurrent.Executor executor = SearchSdkMainThreadWorker.mainExecutor);
    method public com.mapbox.search.SearchEngine createSearchEngineWithBuiltInDataProviders(com.mapbox.search.SearchEngineSettings settings);
    method public com.mapbox.search.SearchEngine createSearchEngineWithBuiltInDataProviders(com.mapbox.search.ApiType apiType, com.mapbox.search.SearchEngineSettings settings, java.util.concurrent.Executor executor = SearchSdkMainThreadWorker.mainExecutor, com.mapbox.search.common.CompletionCallback<kotlin.Unit> callback = com.mapbox.search.base.StubCompletionCallback());
    method public com.mapbox.search.SearchEngine createSearchEngineWithBuiltInDataProviders(com.mapbox.search.ApiType apiType, com.mapbox.search.SearchEngineSettings settings, java.util.concurrent.Executor executor = SearchSdkMainThreadWorker.mainExecutor);
    method public com.mapbox.search.SearchEngine createSearchEngineWithBuiltInDataProviders(com.mapbox.search.ApiType apiType, com.mapbox.search.SearchEngineSettings settings);
  }

  public final class SearchEngineSettings {
    ctor public SearchEngineSettings(String accessToken, com.mapbox.android.core.location.LocationEngine locationEngine = defaultLocationEngine(), com.mapbox.search.ViewportProvider? viewportProvider = null, String geocodingEndpointBaseUrl = "https://api.mapbox.com", String? singleBoxSearchBaseUrl = null);
    ctor public SearchEngineSettings(String accessToken, com.mapbox.android.core.location.LocationEngine locationEngine = defaultLocationEngine(), com.mapbox.search.ViewportProvider? viewportProvider = null, String geocodingEndpointBaseUrl = "https://api.mapbox.com");
    ctor public SearchEngineSettings(String accessToken, com.mapbox.android.core.location.LocationEngine locationEngine = defaultLocationEngine(), com.mapbox.search.ViewportProvider? viewportProvider = null);
    ctor public SearchEngineSettings(String accessToken, com.mapbox.android.core.location.LocationEngine locationEngine = defaultLocationEngine());
    ctor public SearchEngineSettings(String accessToken);
    method public String getAccessToken();
    method public String getGeocodingEndpointBaseUrl();
    method public com.mapbox.android.core.location.LocationEngine getLocationEngine();
    method public String? getSingleBoxSearchBaseUrl();
    method public com.mapbox.search.ViewportProvider? getViewportProvider();
    method public com.mapbox.search.SearchEngineSettings.Builder toBuilder();
    property public final String accessToken;
    property public final String geocodingEndpointBaseUrl;
    property public final com.mapbox.android.core.location.LocationEngine locationEngine;
    property public final String? singleBoxSearchBaseUrl;
    property public final com.mapbox.search.ViewportProvider? viewportProvider;
    field public static final String DEFAULT_ENDPOINT_GEOCODING = "https://api.mapbox.com";
  }

  public static final class SearchEngineSettings.Builder {
    ctor public SearchEngineSettings.Builder(String accessToken);
    method public com.mapbox.search.SearchEngineSettings build();
    method public com.mapbox.search.SearchEngineSettings.Builder geocodingEndpointBaseUrl(String geocodingEndpointBaseUrl);
    method public String getAccessToken();
    method public com.mapbox.search.SearchEngineSettings.Builder locationEngine(com.mapbox.android.core.location.LocationEngine locationEngine);
    method public void setAccessToken(String p);
    method public com.mapbox.search.SearchEngineSettings.Builder singleBoxSearchBaseUrl(String? singleBoxSearchBaseUrl);
    method public com.mapbox.search.SearchEngineSettings.Builder viewportProvider(com.mapbox.search.ViewportProvider? viewportProvider);
    property public final String accessToken;
  }

  public interface SearchMultipleSelectionCallback {
    method public void onError(Exception e);
    method public void onResult(java.util.List<com.mapbox.search.result.SearchSuggestion> suggestions, java.util.List<com.mapbox.search.result.SearchResult> results, com.mapbox.search.ResponseInfo responseInfo);
  }

  @kotlinx.parcelize.Parcelize public final class SearchNavigationOptions implements android.os.Parcelable {
    ctor public SearchNavigationOptions(com.mapbox.search.common.NavigationProfile navigationProfile, com.mapbox.search.EtaType? etaType = null);
    ctor public SearchNavigationOptions(com.mapbox.search.common.NavigationProfile navigationProfile);
    method public com.mapbox.search.EtaType? getEtaType();
    method public com.mapbox.search.common.NavigationProfile getNavigationProfile();
    property public final com.mapbox.search.EtaType? etaType;
    property public final com.mapbox.search.common.NavigationProfile navigationProfile;
  }

  @kotlinx.parcelize.Parcelize public final class SearchOptions implements android.os.Parcelable {
    ctor public SearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, Boolean? fuzzyMatch = null, java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages = defaultSearchOptionsLanguage(), Integer? limit = null, java.util.List<? extends com.mapbox.search.QueryType>? types = null, Integer? requestDebounce = null, com.mapbox.geojson.Point? origin = null, com.mapbox.search.SearchNavigationOptions? navigationOptions = null, com.mapbox.search.RouteOptions? routeOptions = null, java.util.Map<java.lang.String,java.lang.String>? unsafeParameters = null, boolean ignoreIndexableRecords = false, Double? indexableRecordsDistanceThresholdMeters = null);
    ctor public SearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, Boolean? fuzzyMatch = null, java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages = defaultSearchOptionsLanguage(), Integer? limit = null, java.util.List<? extends com.mapbox.search.QueryType>? types = null, Integer? requestDebounce = null, com.mapbox.geojson.Point? origin = null, com.mapbox.search.SearchNavigationOptions? navigationOptions = null, com.mapbox.search.RouteOptions? routeOptions = null, java.util.Map<java.lang.String,java.lang.String>? unsafeParameters = null, boolean ignoreIndexableRecords = false);
    ctor public SearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, Boolean? fuzzyMatch = null, java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages = defaultSearchOptionsLanguage(), Integer? limit = null, java.util.List<? extends com.mapbox.search.QueryType>? types = null, Integer? requestDebounce = null, com.mapbox.geojson.Point? origin = null, com.mapbox.search.SearchNavigationOptions? navigationOptions = null, com.mapbox.search.RouteOptions? routeOptions = null, java.util.Map<java.lang.String,java.lang.String>? unsafeParameters = null);
    ctor public SearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, Boolean? fuzzyMatch = null, java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages = defaultSearchOptionsLanguage(), Integer? limit = null, java.util.List<? extends com.mapbox.search.QueryType>? types = null, Integer? requestDebounce = null, com.mapbox.geojson.Point? origin = null, com.mapbox.search.SearchNavigationOptions? navigationOptions = null, com.mapbox.search.RouteOptions? routeOptions = null);
    ctor public SearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, Boolean? fuzzyMatch = null, java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages = defaultSearchOptionsLanguage(), Integer? limit = null, java.util.List<? extends com.mapbox.search.QueryType>? types = null, Integer? requestDebounce = null, com.mapbox.geojson.Point? origin = null, com.mapbox.search.SearchNavigationOptions? navigationOptions = null);
    ctor public SearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, Boolean? fuzzyMatch = null, java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages = defaultSearchOptionsLanguage(), Integer? limit = null, java.util.List<? extends com.mapbox.search.QueryType>? types = null, Integer? requestDebounce = null, com.mapbox.geojson.Point? origin = null);
    ctor public SearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, Boolean? fuzzyMatch = null, java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages = defaultSearchOptionsLanguage(), Integer? limit = null, java.util.List<? extends com.mapbox.search.QueryType>? types = null, Integer? requestDebounce = null);
    ctor public SearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, Boolean? fuzzyMatch = null, java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages = defaultSearchOptionsLanguage(), Integer? limit = null, java.util.List<? extends com.mapbox.search.QueryType>? types = null);
    ctor public SearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, Boolean? fuzzyMatch = null, java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages = defaultSearchOptionsLanguage(), Integer? limit = null);
    ctor public SearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, Boolean? fuzzyMatch = null, java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages = defaultSearchOptionsLanguage());
    ctor public SearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null, Boolean? fuzzyMatch = null);
    ctor public SearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null, java.util.List<com.mapbox.search.common.IsoCountryCode>? countries = null);
    ctor public SearchOptions(com.mapbox.geojson.Point? proximity = null, com.mapbox.geojson.BoundingBox? boundingBox = null);
    ctor public SearchOptions(com.mapbox.geojson.Point? proximity = null);
    method public com.mapbox.geojson.BoundingBox? getBoundingBox();
    method public java.util.List<com.mapbox.search.common.IsoCountryCode>? getCountries();
    method public Boolean? getFuzzyMatch();
    method public boolean getIgnoreIndexableRecords();
    method public Double? getIndexableRecordsDistanceThresholdMeters();
    method public java.util.List<com.mapbox.search.common.IsoLanguageCode>? getLanguages();
    method public Integer? getLimit();
    method public com.mapbox.search.SearchNavigationOptions? getNavigationOptions();
    method public com.mapbox.geojson.Point? getOrigin();
    method public com.mapbox.geojson.Point? getProximity();
    method public Integer? getRequestDebounce();
    method public com.mapbox.search.RouteOptions? getRouteOptions();
    method public java.util.List<com.mapbox.search.QueryType>? getTypes();
    method public java.util.Map<java.lang.String,java.lang.String>? getUnsafeParameters();
    method public com.mapbox.search.SearchOptions.Builder toBuilder();
    property public final com.mapbox.geojson.BoundingBox? boundingBox;
    property public final java.util.List<com.mapbox.search.common.IsoCountryCode>? countries;
    property public final Boolean? fuzzyMatch;
    property public final boolean ignoreIndexableRecords;
    property public final Double? indexableRecordsDistanceThresholdMeters;
    property public final java.util.List<com.mapbox.search.common.IsoLanguageCode>? languages;
    property public final Integer? limit;
    property public final com.mapbox.search.SearchNavigationOptions? navigationOptions;
    property public final com.mapbox.geojson.Point? origin;
    property public final com.mapbox.geojson.Point? proximity;
    property public final Integer? requestDebounce;
    property public final com.mapbox.search.RouteOptions? routeOptions;
    property public final java.util.List<com.mapbox.search.QueryType>? types;
    property public final java.util.Map<java.lang.String,java.lang.String>? unsafeParameters;
  }

  public static final class SearchOptions.Builder {
    ctor public SearchOptions.Builder();
    method public com.mapbox.search.SearchOptions.Builder boundingBox(com.mapbox.geojson.BoundingBox boundingBox);
    method public com.mapbox.search.SearchOptions build();
    method public com.mapbox.search.SearchOptions.Builder countries(com.mapbox.search.common.IsoCountryCode... countries);
    method public com.mapbox.search.SearchOptions.Builder countries(java.util.List<com.mapbox.search.common.IsoCountryCode> countries);
    method public com.mapbox.search.SearchOptions.Builder fuzzyMatch(boolean fuzzyMatch);
    method public com.mapbox.search.SearchOptions.Builder ignoreIndexableRecords(boolean ignoreIndexableRecords);
    method public com.mapbox.search.SearchOptions.Builder indexableRecordsDistanceThresholdMeters(Double? threshold);
    method public com.mapbox.search.SearchOptions.Builder languages(com.mapbox.search.common.IsoLanguageCode... languages);
    method public com.mapbox.search.SearchOptions.Builder languages(java.util.List<com.mapbox.search.common.IsoLanguageCode> languages);
    method public com.mapbox.search.SearchOptions.Builder limit(int limit);
    method public com.mapbox.search.SearchOptions.Builder navigationOptions(com.mapbox.search.SearchNavigationOptions navigationOptions);
    method public com.mapbox.search.SearchOptions.Builder origin(com.mapbox.geojson.Point origin);
    method public com.mapbox.search.SearchOptions.Builder proximity(com.mapbox.geojson.Point? proximity);
    method public com.mapbox.search.SearchOptions.Builder requestDebounce(int debounce);
    method public com.mapbox.search.SearchOptions.Builder routeOptions(com.mapbox.search.RouteOptions routeOptions);
    method public com.mapbox.search.SearchOptions.Builder types(com.mapbox.search.QueryType... types);
    method public com.mapbox.search.SearchOptions.Builder types(java.util.List<? extends com.mapbox.search.QueryType> types);
    method public com.mapbox.search.SearchOptions.Builder unsafeParameters(java.util.Map<java.lang.String,java.lang.String> unsafeParameters);
  }

  public final class SearchOptionsKt {
  }

  @kotlinx.parcelize.Parcelize public final class SearchResultMetadata implements android.os.Parcelable {
    method public Double? getAverageRating();
    method public String? getCountryIso1();
    method public String? getCountryIso2();
    method public String? getCpsJson();
    method public String? getDescription();
    method public java.util.Map<java.lang.String,java.lang.String> getExtraData();
    method public com.mapbox.search.common.metadata.OpenHours? getOpenHours();
    method public java.util.List<com.mapbox.search.common.metadata.ImageInfo>? getOtherPhotos();
    method public com.mapbox.search.common.metadata.ParkingData? getParking();
    method public String? getPhone();
    method public java.util.List<com.mapbox.search.common.metadata.ImageInfo>? getPrimaryPhotos();
    method public Integer? getReviewCount();
    method public String? getWebsite();
    property public final Double? averageRating;
    property public final String? countryIso1;
    property public final String? countryIso2;
    property public final String? cpsJson;
    property public final String? description;
    property public final java.util.Map<java.lang.String,java.lang.String> extraData;
    property public final com.mapbox.search.common.metadata.OpenHours? openHours;
    property public final java.util.List<com.mapbox.search.common.metadata.ImageInfo>? otherPhotos;
    property public final com.mapbox.search.common.metadata.ParkingData? parking;
    property public final String? phone;
    property public final java.util.List<com.mapbox.search.common.metadata.ImageInfo>? primaryPhotos;
    property public final Integer? reviewCount;
    property public final String? website;
  }

  public interface SearchSelectionCallback extends com.mapbox.search.SearchSuggestionsCallback {
    method public void onResult(com.mapbox.search.result.SearchSuggestion suggestion, com.mapbox.search.result.SearchResult result, com.mapbox.search.ResponseInfo responseInfo);
    method public void onResults(com.mapbox.search.result.SearchSuggestion suggestion, java.util.List<com.mapbox.search.result.SearchResult> results, com.mapbox.search.ResponseInfo responseInfo);
  }

  public interface SearchSuggestionsCallback {
    method public void onError(Exception e);
    method public void onSuggestions(java.util.List<com.mapbox.search.result.SearchSuggestion> suggestions, com.mapbox.search.ResponseInfo responseInfo);
  }

  @kotlinx.parcelize.Parcelize public final class SelectOptions implements android.os.Parcelable {
    ctor public SelectOptions(boolean addResultToHistory = true);
    method public boolean getAddResultToHistory();
    property public final boolean addResultToHistory;
  }

  public interface ServiceProvider {
    method public com.mapbox.search.record.FavoritesDataProvider favoritesDataProvider();
    method public default static com.mapbox.search.ServiceProvider getInstance();
    method public com.mapbox.search.record.HistoryDataProvider historyDataProvider();
    field public static final com.mapbox.search.ServiceProvider.Companion Companion;
  }

  public static final class ServiceProvider.Companion {
    method public com.mapbox.search.ServiceProvider getInstance();
    property public final com.mapbox.search.ServiceProvider INSTANCE;
  }

  public fun interface ViewportProvider {
    method public com.mapbox.geojson.BoundingBox? getViewport();
  }

}

package com.mapbox.search.analytics {

  public interface AnalyticsService {
    method public void sendFeedback(com.mapbox.search.result.SearchResult searchResult, com.mapbox.search.ResponseInfo responseInfo, com.mapbox.search.analytics.FeedbackEvent event);
    method public void sendFeedback(com.mapbox.search.result.SearchSuggestion searchSuggestion, com.mapbox.search.ResponseInfo responseInfo, com.mapbox.search.analytics.FeedbackEvent event);
    method public void sendFeedback(com.mapbox.search.record.HistoryRecord historyRecord, com.mapbox.search.analytics.FeedbackEvent event);
    method public void sendFeedback(com.mapbox.search.record.FavoriteRecord favoriteRecord, com.mapbox.search.analytics.FeedbackEvent event);
    method public void sendMissingResultFeedback(com.mapbox.search.analytics.MissingResultFeedbackEvent event);
  }

  public final class FeedbackEvent {
    ctor public FeedbackEvent(@com.mapbox.search.analytics.FeedbackEvent.FeedbackReason String reason, String? text = null, android.graphics.Bitmap? screenshot = null, String? sessionId = null, String? feedbackId = null);
    ctor public FeedbackEvent(@com.mapbox.search.analytics.FeedbackEvent.FeedbackReason String reason, String? text = null, android.graphics.Bitmap? screenshot = null, String? sessionId = null);
    ctor public FeedbackEvent(@com.mapbox.search.analytics.FeedbackEvent.FeedbackReason String reason, String? text = null, android.graphics.Bitmap? screenshot = null);
    ctor public FeedbackEvent(@com.mapbox.search.analytics.FeedbackEvent.FeedbackReason String reason, String? text = null);
    ctor public FeedbackEvent(@com.mapbox.search.analytics.FeedbackEvent.FeedbackReason String reason);
    method public String? getFeedbackId();
    method public String getReason();
    method public android.graphics.Bitmap? getScreenshot();
    method public String? getSessionId();
    method public String? getText();
    property public final String? feedbackId;
    property public final String reason;
    property public final android.graphics.Bitmap? screenshot;
    property public final String? sessionId;
    property public final String? text;
  }

  @StringDef({com.mapbox.search.analytics.FeedbackEvent.FeedbackReason.INCORRECT_NAME, com.mapbox.search.analytics.FeedbackEvent.FeedbackReason.INCORRECT_ADDRESS, com.mapbox.search.analytics.FeedbackEvent.FeedbackReason.INCORRECT_LOCATION, com.mapbox.search.analytics.FeedbackEvent.FeedbackReason.INCORRECT_PHONE_NUMBER, com.mapbox.search.analytics.FeedbackEvent.FeedbackReason.INCORRECT_RESULT_RANK, com.mapbox.search.analytics.FeedbackEvent.FeedbackReason.OTHER}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public static @interface FeedbackEvent.FeedbackReason {
    field public static final String INCORRECT_ADDRESS = "incorrect_address";
    field public static final String INCORRECT_LOCATION = "incorrect_location";
    field public static final String INCORRECT_NAME = "incorrect_name";
    field public static final String INCORRECT_PHONE_NUMBER = "incorrect_phone_number";
    field public static final String INCORRECT_RESULT_RANK = "incorrect_result_rank";
    field public static final String OTHER = "other_result_issue";
  }

  public final class MissingResultFeedbackEvent {
    ctor public MissingResultFeedbackEvent(com.mapbox.search.ResponseInfo responseInfo, String? text = null, android.graphics.Bitmap? screenshot = null, String? sessionId = null, String? feedbackId = null);
    ctor public MissingResultFeedbackEvent(com.mapbox.search.ResponseInfo responseInfo, String? text = null, android.graphics.Bitmap? screenshot = null, String? sessionId = null);
    ctor public MissingResultFeedbackEvent(com.mapbox.search.ResponseInfo responseInfo, String? text = null, android.graphics.Bitmap? screenshot = null);
    ctor public MissingResultFeedbackEvent(com.mapbox.search.ResponseInfo responseInfo, String? text = null);
    ctor public MissingResultFeedbackEvent(com.mapbox.search.ResponseInfo responseInfo);
    method public String? getFeedbackId();
    method public com.mapbox.search.ResponseInfo getResponseInfo();
    method public android.graphics.Bitmap? getScreenshot();
    method public String? getSessionId();
    method public String? getText();
    property public final String? feedbackId;
    property public final com.mapbox.search.ResponseInfo responseInfo;
    property public final android.graphics.Bitmap? screenshot;
    property public final String? sessionId;
    property public final String? text;
  }

}

package com.mapbox.search.record {

  @kotlinx.parcelize.Parcelize public final class FavoriteRecord implements com.mapbox.search.record.IndexableRecord android.os.Parcelable {
    ctor public FavoriteRecord(String id, String name, String? descriptionText, com.mapbox.search.result.SearchAddress? address, java.util.List<com.mapbox.search.common.RoutablePoint>? routablePoints, java.util.List<java.lang.String>? categories, String? makiIcon, com.mapbox.geojson.Point coordinate, com.mapbox.search.result.SearchResultType type, com.mapbox.search.SearchResultMetadata? metadata);
    method public com.mapbox.search.result.SearchAddress? getAddress();
    method public java.util.List<java.lang.String>? getCategories();
    method public com.mapbox.geojson.Point getCoordinate();
    method public String? getDescriptionText();
    method public String getId();
    method public java.util.List<java.lang.String> getIndexTokens();
    method public String? getMakiIcon();
    method public com.mapbox.search.SearchResultMetadata? getMetadata();
    method public String getName();
    method public java.util.List<com.mapbox.search.common.RoutablePoint>? getRoutablePoints();
    method public com.mapbox.search.result.SearchResultType getType();
    property public com.mapbox.search.result.SearchAddress? address;
    property public java.util.List<java.lang.String>? categories;
    property public com.mapbox.geojson.Point coordinate;
    property public String? descriptionText;
    property public String id;
    property public java.util.List<java.lang.String> indexTokens;
    property public String? makiIcon;
    property public com.mapbox.search.SearchResultMetadata? metadata;
    property public String name;
    property public java.util.List<com.mapbox.search.common.RoutablePoint>? routablePoints;
    property public com.mapbox.search.result.SearchResultType type;
  }

  public interface FavoritesDataProvider extends com.mapbox.search.record.LocalDataProvider<com.mapbox.search.record.FavoriteRecord> {
    field public static final com.mapbox.search.record.FavoritesDataProvider.Companion Companion;
    field public static final String PROVIDER_NAME = "com.mapbox.search.localProvider.favorite";
    field public static final int PROVIDER_PRIORITY = 101; // 0x65
  }

  public static final class FavoritesDataProvider.Companion {
    field public static final String PROVIDER_NAME = "com.mapbox.search.localProvider.favorite";
    field public static final int PROVIDER_PRIORITY = 101; // 0x65
  }

  public interface HistoryDataProvider extends com.mapbox.search.record.LocalDataProvider<com.mapbox.search.record.HistoryRecord> {
    field public static final com.mapbox.search.record.HistoryDataProvider.Companion Companion;
    field public static final String PROVIDER_NAME = "com.mapbox.search.localProvider.history";
    field public static final int PROVIDER_PRIORITY = 100; // 0x64
  }

  public static final class HistoryDataProvider.Companion {
    field public static final String PROVIDER_NAME = "com.mapbox.search.localProvider.history";
    field public static final int PROVIDER_PRIORITY = 100; // 0x64
  }

  @kotlinx.parcelize.Parcelize public final class HistoryRecord implements com.mapbox.search.record.IndexableRecord android.os.Parcelable {
    ctor public HistoryRecord(String id, String name, String? descriptionText, com.mapbox.search.result.SearchAddress? address, java.util.List<com.mapbox.search.common.RoutablePoint>? routablePoints, java.util.List<java.lang.String>? categories, String? makiIcon, com.mapbox.geojson.Point coordinate, com.mapbox.search.result.SearchResultType type, com.mapbox.search.SearchResultMetadata? metadata, long timestamp);
    method public com.mapbox.search.result.SearchAddress? getAddress();
    method public java.util.List<java.lang.String>? getCategories();
    method public com.mapbox.geojson.Point getCoordinate();
    method public String? getDescriptionText();
    method public String getId();
    method public java.util.List<java.lang.String> getIndexTokens();
    method public String? getMakiIcon();
    method public com.mapbox.search.SearchResultMetadata? getMetadata();
    method public String getName();
    method public java.util.List<com.mapbox.search.common.RoutablePoint>? getRoutablePoints();
    method public long getTimestamp();
    method public com.mapbox.search.result.SearchResultType getType();
    property public com.mapbox.search.result.SearchAddress? address;
    property public java.util.List<java.lang.String>? categories;
    property public com.mapbox.geojson.Point coordinate;
    property public String? descriptionText;
    property public String id;
    property public java.util.List<java.lang.String> indexTokens;
    property public String? makiIcon;
    property public com.mapbox.search.SearchResultMetadata? metadata;
    property public String name;
    property public java.util.List<com.mapbox.search.common.RoutablePoint>? routablePoints;
    property public final long timestamp;
    property public com.mapbox.search.result.SearchResultType type;
  }

  public interface IndexableDataProvider<R extends com.mapbox.search.record.IndexableRecord> {
    method public com.mapbox.search.common.AsyncOperationTask clear(java.util.concurrent.Executor executor, com.mapbox.search.common.CompletionCallback<kotlin.Unit> callback);
    method public default com.mapbox.search.common.AsyncOperationTask clear(com.mapbox.search.common.CompletionCallback<kotlin.Unit> callback);
    method public com.mapbox.search.common.AsyncOperationTask contains(String id, java.util.concurrent.Executor executor, com.mapbox.search.common.CompletionCallback<java.lang.Boolean> callback);
    method public default com.mapbox.search.common.AsyncOperationTask contains(String id, com.mapbox.search.common.CompletionCallback<java.lang.Boolean> callback);
    method public com.mapbox.search.common.AsyncOperationTask get(String id, java.util.concurrent.Executor executor, com.mapbox.search.common.CompletionCallback<? super R> callback);
    method public default com.mapbox.search.common.AsyncOperationTask get(String id, com.mapbox.search.common.CompletionCallback<? super R> callback);
    method public com.mapbox.search.common.AsyncOperationTask getAll(java.util.concurrent.Executor executor, com.mapbox.search.common.CompletionCallback<java.util.List<R>> callback);
    method public default com.mapbox.search.common.AsyncOperationTask getAll(com.mapbox.search.common.CompletionCallback<java.util.List<R>> callback);
    method public String getDataProviderName();
    method public int getPriority();
    method public com.mapbox.search.common.AsyncOperationTask registerIndexableDataProviderEngine(com.mapbox.search.record.IndexableDataProviderEngine dataProviderEngine, java.util.concurrent.Executor executor, com.mapbox.search.common.CompletionCallback<kotlin.Unit> callback);
    method public default com.mapbox.search.common.AsyncOperationTask registerIndexableDataProviderEngine(com.mapbox.search.record.IndexableDataProviderEngine dataProviderEngine, com.mapbox.search.common.CompletionCallback<kotlin.Unit> callback);
    method public com.mapbox.search.common.AsyncOperationTask remove(String id, java.util.concurrent.Executor executor, com.mapbox.search.common.CompletionCallback<java.lang.Boolean> callback);
    method public default com.mapbox.search.common.AsyncOperationTask remove(String id, com.mapbox.search.common.CompletionCallback<java.lang.Boolean> callback);
    method public com.mapbox.search.common.AsyncOperationTask unregisterIndexableDataProviderEngine(com.mapbox.search.record.IndexableDataProviderEngine dataProviderEngine, java.util.concurrent.Executor executor, com.mapbox.search.common.CompletionCallback<java.lang.Boolean> callback);
    method public default com.mapbox.search.common.AsyncOperationTask unregisterIndexableDataProviderEngine(com.mapbox.search.record.IndexableDataProviderEngine dataProviderEngine, com.mapbox.search.common.CompletionCallback<java.lang.Boolean> callback);
    method public com.mapbox.search.common.AsyncOperationTask upsert(R record, java.util.concurrent.Executor executor, com.mapbox.search.common.CompletionCallback<kotlin.Unit> callback);
    method public default com.mapbox.search.common.AsyncOperationTask upsert(R record, com.mapbox.search.common.CompletionCallback<kotlin.Unit> callback);
    method public com.mapbox.search.common.AsyncOperationTask upsertAll(java.util.List<? extends R> records, java.util.concurrent.Executor executor, com.mapbox.search.common.CompletionCallback<kotlin.Unit> callback);
    method public default com.mapbox.search.common.AsyncOperationTask upsertAll(java.util.List<? extends R> records, com.mapbox.search.common.CompletionCallback<kotlin.Unit> callback);
    property public abstract String dataProviderName;
    property public abstract int priority;
  }

  public interface IndexableDataProviderEngine {
    method public void clear();
    method public void remove(String id);
    method public void removeAll(Iterable<java.lang.String> ids);
    method public void upsert(com.mapbox.search.record.IndexableRecord record);
    method public void upsertAll(Iterable<? extends com.mapbox.search.record.IndexableRecord> records);
  }

  public interface IndexableRecord extends android.os.Parcelable {
    method public com.mapbox.search.result.SearchAddress? getAddress();
    method public java.util.List<java.lang.String>? getCategories();
    method public com.mapbox.geojson.Point getCoordinate();
    method public String? getDescriptionText();
    method public String getId();
    method public java.util.List<java.lang.String> getIndexTokens();
    method public String? getMakiIcon();
    method public com.mapbox.search.SearchResultMetadata? getMetadata();
    method public String getName();
    method public java.util.List<com.mapbox.search.common.RoutablePoint>? getRoutablePoints();
    method public com.mapbox.search.result.SearchResultType getType();
    property public abstract com.mapbox.search.result.SearchAddress? address;
    property public abstract java.util.List<java.lang.String>? categories;
    property public abstract com.mapbox.geojson.Point coordinate;
    property public abstract String? descriptionText;
    property public abstract String id;
    property public abstract java.util.List<java.lang.String> indexTokens;
    property public abstract String? makiIcon;
    property public abstract com.mapbox.search.SearchResultMetadata? metadata;
    property public abstract String name;
    property public abstract java.util.List<com.mapbox.search.common.RoutablePoint>? routablePoints;
    property public abstract com.mapbox.search.result.SearchResultType type;
  }

  public final class IndexableRecordKt {
  }

  public interface LocalDataProvider<R extends com.mapbox.search.record.IndexableRecord> extends com.mapbox.search.record.IndexableDataProvider<R> {
    method public void addOnDataChangedListener(java.util.concurrent.Executor executor, com.mapbox.search.record.LocalDataProvider.OnDataChangedListener<R> listener);
    method public default void addOnDataChangedListener(com.mapbox.search.record.LocalDataProvider.OnDataChangedListener<R> listener);
    method public void addOnDataProviderEngineRegisterListener(java.util.concurrent.Executor executor, com.mapbox.search.record.LocalDataProvider.OnDataProviderEngineRegisterListener listener);
    method public default void addOnDataProviderEngineRegisterListener(com.mapbox.search.record.LocalDataProvider.OnDataProviderEngineRegisterListener listener);
    method public void removeOnDataChangedListener(com.mapbox.search.record.LocalDataProvider.OnDataChangedListener<R> listener);
    method public void removeOnDataProviderEngineRegisterListener(com.mapbox.search.record.LocalDataProvider.OnDataProviderEngineRegisterListener listener);
  }

  public static interface LocalDataProvider.OnDataChangedListener<R extends com.mapbox.search.record.IndexableRecord> {
    method public void onDataChanged(java.util.List<? extends R> newData);
  }

  public static interface LocalDataProvider.OnDataProviderEngineRegisterListener {
    method public void onEngineRegistered(com.mapbox.search.record.IndexableDataProviderEngine engine);
    method public void onEngineRegistrationError(Exception e);
  }

}

package com.mapbox.search.result {

  public abstract class ResultAccuracy implements android.os.Parcelable {
    ctor public ResultAccuracy();
  }

  @kotlinx.parcelize.Parcelize public static final class ResultAccuracy.Approximate extends com.mapbox.search.result.ResultAccuracy {
    field public static final com.mapbox.search.result.ResultAccuracy.Approximate INSTANCE;
  }

  @kotlinx.parcelize.Parcelize public static final class ResultAccuracy.Interpolated extends com.mapbox.search.result.ResultAccuracy {
    field public static final com.mapbox.search.result.ResultAccuracy.Interpolated INSTANCE;
  }

  @kotlinx.parcelize.Parcelize public static final class ResultAccuracy.Intersection extends com.mapbox.search.result.ResultAccuracy {
    field public static final com.mapbox.search.result.ResultAccuracy.Intersection INSTANCE;
  }

  @kotlinx.parcelize.Parcelize public static final class ResultAccuracy.Parcel extends com.mapbox.search.result.ResultAccuracy {
    field public static final com.mapbox.search.result.ResultAccuracy.Parcel INSTANCE;
  }

  @kotlinx.parcelize.Parcelize public static final class ResultAccuracy.Point extends com.mapbox.search.result.ResultAccuracy {
    field public static final com.mapbox.search.result.ResultAccuracy.Point INSTANCE;
  }

  @kotlinx.parcelize.Parcelize public static final class ResultAccuracy.Rooftop extends com.mapbox.search.result.ResultAccuracy {
    field public static final com.mapbox.search.result.ResultAccuracy.Rooftop INSTANCE;
  }

  @kotlinx.parcelize.Parcelize public static final class ResultAccuracy.Street extends com.mapbox.search.result.ResultAccuracy {
    field public static final com.mapbox.search.result.ResultAccuracy.Street INSTANCE;
  }

  public final class ResultAccuracyKt {
  }

  @kotlinx.parcelize.Parcelize public final class SearchAddress implements android.os.Parcelable {
    ctor public SearchAddress(String? houseNumber = null, String? street = null, String? neighborhood = null, String? locality = null, String? postcode = null, String? place = null, String? district = null, String? region = null, String? country = null);
    ctor public SearchAddress(String? houseNumber = null, String? street = null, String? neighborhood = null, String? locality = null, String? postcode = null, String? place = null, String? district = null, String? region = null);
    ctor public SearchAddress(String? houseNumber = null, String? street = null, String? neighborhood = null, String? locality = null, String? postcode = null, String? place = null, String? district = null);
    ctor public SearchAddress(String? houseNumber = null, String? street = null, String? neighborhood = null, String? locality = null, String? postcode = null, String? place = null);
    ctor public SearchAddress(String? houseNumber = null, String? street = null, String? neighborhood = null, String? locality = null, String? postcode = null);
    ctor public SearchAddress(String? houseNumber = null, String? street = null, String? neighborhood = null, String? locality = null);
    ctor public SearchAddress(String? houseNumber = null, String? street = null, String? neighborhood = null);
    ctor public SearchAddress(String? houseNumber = null, String? street = null);
    ctor public SearchAddress(String? houseNumber = null);
    method public String? formattedAddress(com.mapbox.search.result.SearchAddress.FormatStyle style = FormatStyle.Medium);
    method public String? formattedAddress();
    method public String? getCountry();
    method public String? getDistrict();
    method public String? getHouseNumber();
    method public String? getLocality();
    method public String? getNeighborhood();
    method public String? getPlace();
    method public String? getPostcode();
    method public String? getRegion();
    method public String? getStreet();
    method public com.mapbox.search.result.SearchAddress.Builder toBuilder();
    property public final String? country;
    property public final String? district;
    property public final String? houseNumber;
    property public final String? locality;
    property public final String? neighborhood;
    property public final String? place;
    property public final String? postcode;
    property public final String? region;
    property public final String? street;
    field public static final String SEPARATOR = ", ";
  }

  public static final class SearchAddress.Builder {
    ctor public SearchAddress.Builder();
    method public com.mapbox.search.result.SearchAddress build();
    method public com.mapbox.search.result.SearchAddress.Builder country(String country);
    method public com.mapbox.search.result.SearchAddress.Builder district(String district);
    method public com.mapbox.search.result.SearchAddress.Builder houseNumber(String houseNumber);
    method public com.mapbox.search.result.SearchAddress.Builder locality(String locality);
    method public com.mapbox.search.result.SearchAddress.Builder neighborhood(String neighborhood);
    method public com.mapbox.search.result.SearchAddress.Builder place(String place);
    method public com.mapbox.search.result.SearchAddress.Builder postcode(String postcode);
    method public com.mapbox.search.result.SearchAddress.Builder region(String region);
    method public com.mapbox.search.result.SearchAddress.Builder street(String street);
  }

  public static final class SearchAddress.FormatComponent {
    field public static final com.mapbox.search.result.SearchAddress.FormatComponent COUNTRY;
    field public static final com.mapbox.search.result.SearchAddress.FormatComponent DISTRICT;
    field public static final com.mapbox.search.result.SearchAddress.FormatComponent HOUSE_NUMBER;
    field public static final com.mapbox.search.result.SearchAddress.FormatComponent LOCALITY;
    field public static final com.mapbox.search.result.SearchAddress.FormatComponent NEIGHBORHOOD;
    field public static final com.mapbox.search.result.SearchAddress.FormatComponent PLACE;
    field public static final com.mapbox.search.result.SearchAddress.FormatComponent POSTCODE;
    field public static final com.mapbox.search.result.SearchAddress.FormatComponent REGION;
    field public static final com.mapbox.search.result.SearchAddress.FormatComponent STREET;
  }

  public abstract static class SearchAddress.FormatStyle {
  }

  public static final class SearchAddress.FormatStyle.Full extends com.mapbox.search.result.SearchAddress.FormatStyle {
    field public static final com.mapbox.search.result.SearchAddress.FormatStyle.Full INSTANCE;
  }

  public static final class SearchAddress.FormatStyle.Long extends com.mapbox.search.result.SearchAddress.FormatStyle {
    field public static final com.mapbox.search.result.SearchAddress.FormatStyle.Long INSTANCE;
  }

  public static final class SearchAddress.FormatStyle.Medium extends com.mapbox.search.result.SearchAddress.FormatStyle {
    field public static final com.mapbox.search.result.SearchAddress.FormatStyle.Medium INSTANCE;
  }

  public static final class SearchAddress.FormatStyle.Short extends com.mapbox.search.result.SearchAddress.FormatStyle {
    field public static final com.mapbox.search.result.SearchAddress.FormatStyle.Short INSTANCE;
  }

  public final class SearchAddressKt {
  }

  @kotlinx.parcelize.Parcelize public final class SearchResult implements android.os.Parcelable {
    method public com.mapbox.search.result.ResultAccuracy? getAccuracy();
    method public com.mapbox.search.result.SearchAddress? getAddress();
    method public java.util.List<java.lang.String>? getCategories();
    method public com.mapbox.geojson.Point getCoordinate();
    method public String? getDescriptionText();
    method public Double? getDistanceMeters();
    method public Double? getEtaMinutes();
    method public java.util.Map<java.lang.String,java.lang.String> getExternalIDs();
    method public String? getFullAddress();
    method public String getId();
    method public com.mapbox.search.record.IndexableRecord? getIndexableRecord();
    method public String? getMakiIcon();
    method public String? getMatchingName();
    method public com.mapbox.search.SearchResultMetadata? getMetadata();
    method public String getName();
    method public com.mapbox.search.RequestOptions getRequestOptions();
    method public java.util.List<com.mapbox.search.common.RoutablePoint>? getRoutablePoints();
    method public Integer? getServerIndex();
    method public java.util.List<com.mapbox.search.result.SearchResultType> getTypes();
    property public final com.mapbox.search.result.ResultAccuracy? accuracy;
    property public final com.mapbox.search.result.SearchAddress? address;
    property public final java.util.List<java.lang.String>? categories;
    property public final com.mapbox.geojson.Point coordinate;
    property public final String? descriptionText;
    property public final Double? distanceMeters;
    property public final Double? etaMinutes;
    property public final java.util.Map<java.lang.String,java.lang.String> externalIDs;
    property public final String? fullAddress;
    property public final String id;
    property public final com.mapbox.search.record.IndexableRecord? indexableRecord;
    property public final String? makiIcon;
    property public final String? matchingName;
    property public final com.mapbox.search.SearchResultMetadata? metadata;
    property public final String name;
    property public final com.mapbox.search.RequestOptions requestOptions;
    property public final java.util.List<com.mapbox.search.common.RoutablePoint>? routablePoints;
    property public final Integer? serverIndex;
    property public final java.util.List<com.mapbox.search.result.SearchResultType> types;
  }

  public enum SearchResultType {
    enum_constant public static final com.mapbox.search.result.SearchResultType ADDRESS;
    enum_constant public static final com.mapbox.search.result.SearchResultType BLOCK;
    enum_constant public static final com.mapbox.search.result.SearchResultType COUNTRY;
    enum_constant public static final com.mapbox.search.result.SearchResultType DISTRICT;
    enum_constant public static final com.mapbox.search.result.SearchResultType LOCALITY;
    enum_constant public static final com.mapbox.search.result.SearchResultType NEIGHBORHOOD;
    enum_constant public static final com.mapbox.search.result.SearchResultType PLACE;
    enum_constant public static final com.mapbox.search.result.SearchResultType POI;
    enum_constant public static final com.mapbox.search.result.SearchResultType POSTCODE;
    enum_constant public static final com.mapbox.search.result.SearchResultType REGION;
    enum_constant public static final com.mapbox.search.result.SearchResultType STREET;
  }

  public final class SearchResultTypeKt {
  }

  @kotlinx.parcelize.Parcelize public final class SearchSuggestion implements android.os.Parcelable {
    method public com.mapbox.search.result.SearchAddress? getAddress();
    method public java.util.List<java.lang.String>? getCategories();
    method public String? getDescriptionText();
    method public Double? getDistanceMeters();
    method public Double? getEtaMinutes();
    method public java.util.Map<java.lang.String,java.lang.String> getExternalIDs();
    method public String? getFullAddress();
    method public String getId();
    method public String? getMakiIcon();
    method public String? getMatchingName();
    method public com.mapbox.search.SearchResultMetadata? getMetadata();
    method public String getName();
    method public com.mapbox.search.RequestOptions getRequestOptions();
    method public Integer? getServerIndex();
    method public com.mapbox.search.result.SearchSuggestionType getType();
    method public boolean isBatchResolveSupported();
    property public final com.mapbox.search.result.SearchAddress? address;
    property public final java.util.List<java.lang.String>? categories;
    property public final String? descriptionText;
    property public final Double? distanceMeters;
    property public final Double? etaMinutes;
    property public final java.util.Map<java.lang.String,java.lang.String> externalIDs;
    property public final String? fullAddress;
    property public final String id;
    property public final boolean isBatchResolveSupported;
    property public final String? makiIcon;
    property public final String? matchingName;
    property public final com.mapbox.search.SearchResultMetadata? metadata;
    property public final String name;
    property public final com.mapbox.search.RequestOptions requestOptions;
    property public final Integer? serverIndex;
    property public final com.mapbox.search.result.SearchSuggestionType type;
  }

  public final class SearchSuggestionKt {
  }

  public abstract class SearchSuggestionType implements android.os.Parcelable {
  }

  @kotlinx.parcelize.Parcelize public static final class SearchSuggestionType.Brand extends com.mapbox.search.result.SearchSuggestionType {
    ctor public SearchSuggestionType.Brand(String brandName, String brandId);
    method public String getBrandId();
    method public String getBrandName();
    property public final String brandId;
    property public final String brandName;
  }

  @kotlinx.parcelize.Parcelize public static final class SearchSuggestionType.Category extends com.mapbox.search.result.SearchSuggestionType {
    method public String getCanonicalName();
    property public final String canonicalName;
  }

  @kotlinx.parcelize.Parcelize public static final class SearchSuggestionType.IndexableRecordItem extends com.mapbox.search.result.SearchSuggestionType {
    method public String getDataProviderName();
    method public com.mapbox.search.record.IndexableRecord getRecord();
    method public boolean isFavoriteRecord();
    method public boolean isHistoryRecord();
    property public final String dataProviderName;
    property public final boolean isFavoriteRecord;
    property public final boolean isHistoryRecord;
    property public final com.mapbox.search.record.IndexableRecord record;
  }

  @kotlinx.parcelize.Parcelize public static final class SearchSuggestionType.Query extends com.mapbox.search.result.SearchSuggestionType {
    field public static final com.mapbox.search.result.SearchSuggestionType.Query INSTANCE;
  }

  @kotlinx.parcelize.Parcelize public static final class SearchSuggestionType.SearchResultSuggestion extends com.mapbox.search.result.SearchSuggestionType {
    method public java.util.List<com.mapbox.search.result.SearchResultType> getTypes();
    property public final java.util.List<com.mapbox.search.result.SearchResultType> types;
  }

}

package com.mapbox.search.utils.bitmap {

  public final class BitmapsKt {
  }

}

