plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'com.getkeepsafe.dexcount'
}

apply from: "../gradle/ktlint.gradle"
apply from: "../gradle/dexcount.gradle"
apply from: "../gradle/versions.gradle"
//apply from: "../gradle/pitest.gradle"

def mapboxApiToken = project.properties['MAPBOX_ACCESS_TOKEN'] ?: System.getenv('MAPBOX_ACCESS_TOKEN')
if (mapboxApiToken == null) {
    throw new Exception("API token is not specified.")
}

def apiType = null
def apiTypeString = null

if (project.hasProperty('API_TYPE')) {
    apiTypeString = String.valueOf(project.property('API_TYPE'))
} else if (System.getenv('API_TYPE') != null) {
    apiTypeString = String.valueOf(System.getenv('API_TYPE'))
}

if (apiTypeString == "SEARCH_BOX") {
    apiType = "com.mapbox.search.ApiType.SEARCH_BOX"
} else if (apiTypeString == "SBS") {
    apiType = "com.mapbox.search.ApiType.SBS"
} else if (apiTypeString == "GEOCODING") {
    apiType = "com.mapbox.search.ApiType.GEOCODING"
} else {
    def enableSBS = false
    if (project.hasProperty('ENABLE_SBS')) {
        enableSBS = Boolean.valueOf(project.property('ENABLE_SBS'))
    } else if (System.getenv('ENABLE_SBS') != null) {
        enableSBS = Boolean.valueOf(System.getenv('ENABLE_SBS'))
    }

    if (enableSBS) {
        apiType = "com.mapbox.search.ApiType.SBS"
    } else {
        apiType = "com.mapbox.search.ApiType.SEARCH_BOX"
    }
}

android {
    namespace 'com.mapbox.search.sample'
    compileSdkVersion androidVersions.compileSdkVersion

    defaultConfig {
        buildConfigField "boolean", "COVERAGE_ENABLED", "${project.hasProperty('coverage')}"
        buildConfigField "com.mapbox.search.ApiType", "API_TYPE", apiType
        resValue "string", "mapbox_access_token", mapboxApiToken

        applicationId "com.mapbox.search.sample"
        minSdkVersion androidVersions.minSdkVersion
        targetSdkVersion androidVersions.targetSdkVersion
        versionCode 1
        versionName "0.1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            manifestPlaceholders = [appName: "Debug MapboxSearchSample"]

            multiDexEnabled true
            multiDexKeepProguard file('proguard-multidex-rules.pro')
        }
        release {
            manifestPlaceholders = [appName: "MapboxSearchSample"]

            multiDexEnabled false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }

    buildFeatures {
        viewBinding true
        buildConfig = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        allWarningsAsErrors = !project.hasProperty('android.injected.invoked.from.ide')
        jvmTarget = JavaVersion.VERSION_1_8.toString()

        freeCompilerArgs += [
                '-Xopt-in=com.mapbox.search.common.RestrictedMapboxSearchAPI'
        ]
    }

    lint {
        abortOnError true
        disable 'ParcelCreator'
    }
}

dependencies {
    implementation project(':search-sdk')
    implementation project(':ui')
    implementation project(':base')
    implementation project(':offline')
    implementation project(':autofill')
    implementation project(':discover')
    implementation project(':place-autocomplete')

    debugImplementation dependenciesList.androidxMultidex

    implementation dependenciesList.kotlinStdlibJdk8

    implementation dependenciesList.androidxAppcompat
    implementation dependenciesList.androidxRecyclerview
    implementation dependenciesList.androidxLifecycleRuntimeKtx
    implementation dependenciesList.androidxLifecycleViewmodelKtx
    implementation dependenciesList.androidxCore
    implementation dependenciesList.androidxConstraintlayout

    implementation dependenciesList.mapboxMaps
    implementation dependenciesList.mapboxTurf

    ktlint dependenciesList.ktlint

    debugImplementation dependenciesList.leakcanary

    androidTestImplementation project(":common-tests")

    androidTestImplementation dependenciesList.androidXUiAutomator
    androidTestImplementation dependenciesList.androidXEspressoContrib
    androidTestImplementation dependenciesList.androidXEspressoCore
    androidTestImplementation dependenciesList.androidxTestRunner
    androidTestImplementation dependenciesList.androidxTestRules
    androidTestImplementation dependenciesList.androidxJunit
    androidTestImplementation dependenciesList.barista
    androidTestImplementation dependenciesList.okHttpMockWebServer
    androidTestImplementation dependenciesList.junit
}
