apply plugin: 'jacoco'

apply from: "../gradle/versions.gradle"

jacoco {
    // Workaround for https://youtrack.jetbrains.com/issue/KT-44757
    toolVersion = "${toolsVersion.jacoco}"
}

project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type -> type.name }

    buildTypes.each { buildTypeName ->
        def sourceName, sourcePath
        sourceName = sourcePath = "${buildTypeName}"
        def testTaskName = "test${sourceName.capitalize()}UnitTest"
        def coverageTaskName = "${testTaskName}Coverage"

        // Create coverage task of form 'testFlavorTypeUnitTestCoverage' depending on 'testFlavorTypeUnitTest'
        task "${coverageTaskName}"(type: JacocoReport, dependsOn: "$testTaskName") {
            group = 'Reporting'
            description = "Generate Jacoco coverage reports for the ${sourceName.capitalize()} build."

            classDirectories.setFrom(
                    fileTree(
                            dir: "${project.buildDir}/tmp/kotlin-classes/$sourcePath",
                            excludes: ['**/R.class',
                                       '**/R$*.class',
                                       '**/BuildConfig.*',
                                       '**/Manifest*.*',
                            ]
                    ) + fileTree(
                            dir: "${project.buildDir}/intermediates/javac/${sourcePath}",
                            excludes: ['**/R.class',
                                       '**/R$*.class',
                                       '**/BuildConfig.*',
                                       '**/Manifest*.*',
                            ]
                    )
            )

            sourceDirectories.setFrom(files(["src/main/java", "src/$buildTypeName/java"]))

            executionData.setFrom(
                    fileTree(
                            dir: "${project.buildDir}",
                            includes: ["jacoco/${testTaskName}.exec",
                                       "jacoco/*.ec",
                                       "outputs/code_coverage/${sourceName}AndroidTest/connected/*.ec"]
                    )
            )

            reports {
                xml.required = true
                csv.required = false
                html.required = true
            }
        }
        build.dependsOn "${coverageTaskName}"
    }
}
