buildscript {
    apply from: "${rootDir}/gradle/versions.gradle"

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath pluginDependencies.gradle
        classpath pluginDependencies.kotlin
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply from: "${rootDir}/gradle/metalava-dependencies.gradle"

android.libraryVariants.all { variant ->
    // TODO eliminate variants https://issuetracker.google.com/issues/62201427
    if (variant.buildType.isDebuggable()) {
        return
    }
    task updateApi(type: JavaExec) {
        inputs.dir('src/main/java')
        outputs.file('api/api-metalava.txt')
        outputs.upToDateWhen { false }

        classpath = configurations.metalava
        main = 'com.android.tools.metalava.Driver'

        doFirst {
            args = [
                    '--no-banner',
                    '--source-path', 'src/main/java',
                    '--compatible-output=no',
                    '--output-default-values=yes',
                    '--omit-common-packages=yes',
                    '--output-kotlin-nulls=yes',
                    '--warnings-as-errors',
                    '--lints-as-errors',
                    '--classpath', (project.files(android.getBootClasspath()) + variant.javaCompileProvider.get().classpath).join(File.pathSeparator),
                    '--api', 'api/api-metalava.txt'
            ]
            if (project.hasProperty('sourcePath')) {
                args += '--source-path'
                args += sourcePath
            }
            if (project.hasProperty('hidePackage')) {
                args += '--hide-package'
                args += hidePackage
            }
            if (project.hasProperty('hideId')) {
                args += '--hide'
                args += hideId
            }
        }
    }

    updateApi.dependsOn assembleRelease

    task checkApi(type: JavaExec) {
        inputs.file('api/api-metalava.txt')
        inputs.dir('src/main/java')
        outputs.file('api/api-metalava.txt')
        outputs.upToDateWhen { false }

        classpath = configurations.metalava
        main = 'com.android.tools.metalava.Driver'

        doFirst {
            args = [
                    '--no-banner',
                    '--source-path', 'src/main/java',
                    '--compatible-output=no',
                    '--output-default-values=yes',
                    '--omit-common-packages=yes',
                    '--output-kotlin-nulls=yes',
                    '--input-kotlin-nulls=yes',
                    '--warnings-as-errors',
                    '--lints-as-errors',
                    '--classpath', (project.files(android.getBootClasspath()) + variant.javaCompileProvider.get().classpath).join(File.pathSeparator),
                    '--check-compatibility:api:current', 'api/api-metalava.txt'
            ]
            if (project.hasProperty('sourcePath')) {
                args += '--source-path'
                args += sourcePath
            }
            if (project.hasProperty('hidePackage')) {
                args += '--hide-package'
                args += hidePackage
            }
            if (project.hasProperty('hideId')) {
                args += '--hide'
                args += hideId
            }
        }
    }

    checkApi.dependsOn assembleRelease
}
