package com.mapbox.search.base.core

import com.mapbox.geojson.Point
import com.mapbox.search.internal.bindgen.AttributeSet
import com.mapbox.search.internal.bindgen.EvSearchOptions
import com.mapbox.search.internal.bindgen.ExceptionalPeriod
import com.mapbox.search.internal.bindgen.LonLatBBox
import com.mapbox.search.internal.bindgen.OpenMode
import com.mapbox.search.internal.bindgen.OpenPeriod
import com.mapbox.search.internal.bindgen.QueryType
import com.mapbox.search.internal.bindgen.ReverseGeoOptions
import com.mapbox.search.internal.bindgen.ReverseMode

fun createCoreSearchOptions(
    proximity: Point? = null,
    origin: Point? = null,
    navProfile: String? = null,
    etaType: String? = null,
    bbox: LonLatBBox? = null,
    countries: List<String>? = null,
    fuzzyMatch: Boolean? = null,
    language: List<String>? = null,
    limit: Int? = null,
    types: List<QueryType>? = null,
    ignoreUR: Boolean = false,
    urDistanceThreshold: Double? = null,
    requestDebounce: Int? = null,
    route: List<Point>? = null,
    sarType: String? = null,
    timeDeviation: Double? = null,
    addonAPI: Map<String, String>? = null,
    offlineSearchPlacesOutsideBbox: Boolean = false,
    ensureResultsPerCategory: Boolean? = null,
    attributeSets: List<AttributeSet>? = null,
    evSearchOptions: EvSearchOptions? = null,
): CoreSearchOptions = CoreSearchOptions(
    proximity = proximity,
    origin = origin,
    navProfile = navProfile,
    etaType = etaType,
    bbox = bbox,
    countries = countries,
    fuzzyMatch = fuzzyMatch,
    language = language,
    limit = limit,
    types = types,
    ignoreUR = ignoreUR,
    urDistanceThreshold = urDistanceThreshold,
    requestDebounce = requestDebounce,
    route = route,
    sarType = sarType,
    timeDeviation = timeDeviation,
    addonAPI = addonAPI?.let { it as? HashMap<String, String> ?: HashMap(it) },
    offlineSearchPlacesOutsideBbox = offlineSearchPlacesOutsideBbox,
    ensureResultsPerCategory = ensureResultsPerCategory,
    attributeSets = attributeSets,
    evSearchOptions = evSearchOptions,
)

fun createCoreReverseGeoOptions(
    point: Point,
    reverseMode: ReverseMode? = null,
    countries: List<String>? = null,
    language: List<String>? = null,
    limit: Int? = null,
    types: List<QueryType>? = null,
): ReverseGeoOptions = ReverseGeoOptions(
    point,
    reverseMode,
    countries,
    language,
    limit,
    types,
)

fun createCoreResultMetadata(
    reviewCount: Int? = null,
    phone: String? = null,
    website: String? = null,
    avRating: Double? = null,
    description: String? = null,
    openHours: CoreOpenHours? = null,
    primaryPhoto: List<CoreImageInfo>? = null,
    otherPhoto: List<CoreImageInfo>? = null,
    cpsJson: String? = null,
    parking: CoreParkingData? = null,
    children: List<CoreChildMetadata>? = null,
    data: HashMap<String, String> = hashMapOf(),
    wheelchairAccessible: Boolean? = null,
    delivery: Boolean? = null,
    driveThrough: Boolean? = null,
    reservable: Boolean? = null,
    parkingAvailable: Boolean? = null,
    valetParking: Boolean? = null,
    streetParking: Boolean? = null,
    parkingType: CoreParkingType? = null,
    servesBreakfast: Boolean? = null,
    servesBrunch: Boolean? = null,
    servesDinner: Boolean? = null,
    servesLunch: Boolean? = null,
    servesWine: Boolean? = null,
    servesBeer: Boolean? = null,
    takeout: Boolean? = null,
    facebookId: String? = null,
    fax: String? = null,
    email: String? = null,
    instagram: String? = null,
    twitter: String? = null,
    priceLevel: String? = null,
    servesVegan: Boolean? = null,
    servesVegetarian: Boolean? = null,
    rating: Float? = null,
    popularity: Float? = null,
    evMetadata: CoreEvMetadata? = null,
    directions: List<CoreDisplayText>? = null,
    facilities: List<CoreFacility>? = null,
    timezone: String? = null,
    lastUpdated: String? = null,
): CoreResultMetadata = CoreResultMetadata(
    reviewCount = reviewCount,
    phone = phone,
    website = website,
    avRating = avRating,
    description = description,
    openHours = openHours,
    primaryPhoto = primaryPhoto,
    otherPhoto = otherPhoto,
    cpsJson = cpsJson,
    parking = parking,
    children = children,
    data = data,
    wheelchairAccessible = wheelchairAccessible,
    delivery = delivery,
    driveThrough = driveThrough,
    reservable = reservable,
    parkingAvailable = parkingAvailable,
    valetParking = valetParking,
    streetParking = streetParking,
    parkingType = parkingType,
    servesBreakfast = servesBreakfast,
    servesBrunch = servesBrunch,
    servesDinner = servesDinner,
    servesLunch = servesLunch,
    servesWine = servesWine,
    servesBeer = servesBeer,
    takeout = takeout,
    facebookId = facebookId,
    fax = fax,
    email = email,
    instagram = instagram,
    twitter = twitter,
    priceLevel = priceLevel,
    servesVegan = servesVegan,
    servesVegetarian = servesVegetarian,
    rating = rating,
    popularity = popularity,
    evMetadata = evMetadata,
    directions = directions,
    facilities = facilities,
    timezone = timezone,
    lastUpdated = lastUpdated,
)

fun createCoreOpenHours(
    mode: OpenMode,
    periods: List<OpenPeriod>,
    weekdayText: List<String>? = null,
    note: String? = null,
    exceptionalOpenings: List<ExceptionalPeriod> = emptyList(),
    exceptionalClosings: List<ExceptionalPeriod> = emptyList(),
): CoreOpenHours = CoreOpenHours(
    mode = mode,
    periods = periods,
    weekdayText = weekdayText,
    note = note,
    exceptionalOpenings = exceptionalOpenings,
    exceptionalClosings = exceptionalClosings,
)

fun createCoreEvSearchOptions(
    connectorTypes: List<CoreConnectorType>? = null,
    operators: List<String>? = null,
    minChargingPower: Float? = null,
    maxChargingPower: Float? = null,
    availability: CoreChargingStatus? = null,
): CoreEvSearchOptions = CoreEvSearchOptions(
    connectorTypes = connectorTypes,
    operators = operators,
    minChargingPower = minChargingPower,
    maxChargingPower = maxChargingPower,
    availability = availability,
)
